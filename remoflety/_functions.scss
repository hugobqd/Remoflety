//  ----------------------------------------
//    EXPLOITER LE TABLEAU $fs-bigmap
//  ----------------------------------------
// Fonction pour acceder facilement aux valeurs de $remo
//    remo-get("bp")         -> 320px, 768px, 1200px
//    remo-get("bp", 1)      -> 320px
//    length(remo-get("bp")) -> 3
//    remo-get("nimportequoi") -> false
@function remo-get($key, $i: false, $map: $remo0) {
    $level2: map-get($map, $key);
    @if $i and length(map-get($map, $key)) > 1 {
        @return nth($level2, $i);
    } @elseif $i and length(map-get($map, $key)) == 1 {
        @return nth($level2, 1);
    } @else {
        @return $level2;
    }
}



//  ----------------------------------------
//    PARCOURIR TABLEAU A DEUX NIVEAUX
//    https://css-tricks.com/snippets/sass/deep-getset-maps/
//        $o-grid-default-config: map-deep-set($o-grid-default-config, "layouts" "M", 650px);
//  ----------------------------------------
/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}


//  ----------------------------------------
//    SUPPRIMER LES UNITÃ‰S
//    https://css-tricks.com/snippets/sass/strip-unit-function/
//        $length: 42px;
//        $value: strip-unit(42px);
//        -> 42
//  ----------------------------------------
/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}



//  ----------------------------------------
//    PUISSANCES
//    https://css-tricks.com/snippets/sass/power-function/
//        pow(2, 3) * 1px;
//        -> 8px
//  ----------------------------------------
@function pow($number, $exponent) {
    @if (round($exponent) != $exponent) {
        @return exp($exponent * ln($number));
    }

    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    } @else if $exponent < 0 {
        @for $i from 1 through -$exponent {
            $value: $value / $number;
        }
    }

    @return $value;
}

@function factorial($value) {
    $result: 1;

    @if $value == 0 {
        @return $result;
    }

    @for $index from 1 through $value {
        $result: $result * $index;
    }

    @return $result;
}

@function summation($iteratee, $input, $initial: 0, $limit: 100) {
    $sum: 0;

    @for $index from $initial to $limit {
        $sum: $sum + call($iteratee, $input, $index);
    }

    @return $sum;
}

@function exp-maclaurin($x, $n) {
    @return (pow($x, $n) / factorial($n));
}

@function exp($value) {
    @return summation('exp-maclaurin', $value, 0, 100);
}

@function ln-maclaurin($x, $n) {
    @return (pow(-1, $n + 1) / $n) * (pow($x - 1, $n));
}

@function ln($value) {
    $ten-exp: 1;
    $ln-ten: 2.30258509;

    @while ($value > pow(10, $ten-exp)) {
        $ten-exp: $ten-exp + 1;
    }

    @return summation(ln-maclaurin, $value / pow(10, $ten-exp), 1, 100) + $ten-exp * $ln-ten;
}
